//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference1
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/ExecuteCodeUnit", ConfigurationName="ServiceReference1.ExecuteCodeUnit_Port")]
    public interface ExecuteCodeUnit_Port
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/ExecuteCodeUnit:Execute", ReplyAction="*")]
        System.Threading.Tasks.Task<ServiceReference1.Execute_Result> ExecuteAsync(ServiceReference1.Execute request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Execute", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/ExecuteCodeUnit", IsWrapped=true)]
    public partial class Execute
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/ExecuteCodeUnit", Order=0)]
        public string fName;
        
        public Execute()
        {
        }
        
        public Execute(string fName)
        {
            this.fName = fName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Execute_Result", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/ExecuteCodeUnit", IsWrapped=true)]
    public partial class Execute_Result
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/ExecuteCodeUnit", Order=0)]
        public string return_value;
        
        public Execute_Result()
        {
        }
        
        public Execute_Result(string return_value)
        {
            this.return_value = return_value;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public interface ExecuteCodeUnit_PortChannel : ServiceReference1.ExecuteCodeUnit_Port, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public partial class ExecuteCodeUnit_PortClient : System.ServiceModel.ClientBase<ServiceReference1.ExecuteCodeUnit_Port>, ServiceReference1.ExecuteCodeUnit_Port
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ExecuteCodeUnit_PortClient() : 
                base(ExecuteCodeUnit_PortClient.GetDefaultBinding(), ExecuteCodeUnit_PortClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.ExecuteCodeUnit_Port.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ExecuteCodeUnit_PortClient(EndpointConfiguration endpointConfiguration) : 
                base(ExecuteCodeUnit_PortClient.GetBindingForEndpoint(endpointConfiguration), ExecuteCodeUnit_PortClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ExecuteCodeUnit_PortClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ExecuteCodeUnit_PortClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ExecuteCodeUnit_PortClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ExecuteCodeUnit_PortClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ExecuteCodeUnit_PortClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ServiceReference1.Execute_Result> ServiceReference1.ExecuteCodeUnit_Port.ExecuteAsync(ServiceReference1.Execute request)
        {
            return base.Channel.ExecuteAsync(request);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.Execute_Result> ExecuteAsync(string fName)
        {
            ServiceReference1.Execute inValue = new ServiceReference1.Execute();
            inValue.fName = fName;
            return ((ServiceReference1.ExecuteCodeUnit_Port)(this)).ExecuteAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ExecuteCodeUnit_Port))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ExecuteCodeUnit_Port))
            {
                return new System.ServiceModel.EndpointAddress("https://bctest.bdpowersectorerp.com:7047/POWERDIVBC/WS/ReplaceWithAPercentEncoded" +
                        "CompanyName/Codeunit/ExecuteCodeUnit");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ExecuteCodeUnit_PortClient.GetBindingForEndpoint(EndpointConfiguration.ExecuteCodeUnit_Port);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ExecuteCodeUnit_PortClient.GetEndpointAddress(EndpointConfiguration.ExecuteCodeUnit_Port);
        }
        
        public enum EndpointConfiguration
        {
            
            ExecuteCodeUnit_Port,
        }
    }
}
